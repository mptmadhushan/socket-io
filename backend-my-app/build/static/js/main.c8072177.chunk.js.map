{"version":3,"sources":["logo.svg","global/header.js","main/PlaceOrder.js","main/UpdatePredicted.js","main/Kitchen.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","socket","Header","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","endpoint","window","location","hostname","socketIOClient","react_default","a","createElement","className","NavLink","exact","to","Component","PlaceOrder","getData","foodItems","console","log","map","food","order","setState","food_data","sendOrder","id","order_details","_id","emit","new_array","changeQuantity","event","foodid","parseInt","target","value","color","on","off","_this2","key","name","onChange","e","type","placeholder","onClick","reactstrap_es","striped","getFoodData","UpdatePredicted","sendPredQty","predicted_details","changePredQuantity","predQty","min","Kitchen","changeData","markDone","ordQty","prodQty","react_html_table_to_excel_default","table","filename","sheet","buttonText","App","header_Header","Switch","Route","path","component","Boolean","match","ReactDOM","render","BrowserRouter","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c8072177.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React ,{Component} from 'react'\nimport { NavLink } from 'react-router-dom'\nimport socketIOClient from 'socket.io-client';\nimport './header.css';\n\n// The Header creates links that can be used to navigate\n// between routes.\nvar socket;\nclass Header extends Component{\n\n  constructor(){\n    super();\n    this.state = {\n        endpoint: window.location.hostname,\n      };\n\n    socket = socketIOClient(this.state.endpoint);\n}\n\n\n  render(){\n    return (<header>\n      <nav>\n        <ul className=\"NavClass\">\n          \n          <li ><NavLink exact to='/'> Place Order </NavLink></li>\n          <li><NavLink to='/updatepredicted'>Change Predicted </NavLink></li>\n          <li><NavLink to='/kitchen'> Kitchen </NavLink></li>\n        </ul>\n      </nav>\n    </header>);\n  }\n\n};\n\n\n\n\n\n\nexport  {Header,socket};\n","import React,{Component} from 'react';\nimport { Button,Table,Container } from 'reactstrap';\nimport {socket} from '../global/header';\n\nclass PlaceOrder extends Component{\n    \n    constructor(){\n        super();\n        this.state = {\n            color:'white',\n            food_data:[]\n            // this is where we are connecting to with sockets,\n          };\n    }\n\n    getData = (foodItems)=>{\n        console.log(foodItems);\n       foodItems = foodItems.map((food)=>{\n            food.order = 0;\n\n            return food;\n        });\n        this.setState({food_data:foodItems});\n    }\n\n    componentDidMount(){\n       \n        socket.emit(\"initial_data\");\n        var state_current = this;\n        socket.on(\"get_data\",state_current.getData);\n    }\n    \n    \n\n    componentWillUnmount(){\n        socket.off(\"get_data\",this.getData);   \n    }\n\n    sendOrder = (id) =>{\n        var order_details;\n         this.state.food_data.map((food)=>{\n            if(food._id == id){\n                order_details = food;\n            }\n            return food;\n        });\n        console.log(order_details);\n        socket.emit('putOrder', order_details); \n        var new_array = this.state.food_data.map((food)=>{\n            \n                food.order = 0;  \n            return food;\n        });\n        this.setState({food_data:new_array});\n        \n      \n\n    }\n\n    changeQuantity = (event,foodid) => {\n        if( parseInt(event.target.value) < 0 ){\n            event.target.value = 0;\n        }\n        var new_array = this.state.food_data.map((food)=>{\n            if(food._id == foodid){\n                food.order = parseInt(event.target.value);   \n            }\n            return food;\n        });\n        this.setState({food_data:new_array});\n     \n    }\n\n\n   \n\n    getFoodData(){\n\n        return this.state.food_data.map((food)=>{\n            return <tr key={food._id}>\n            <td> {food.name} </td>\n            <td><input onChange={(e) => this.changeQuantity(e,food._id)} value={food.order}   type=\"number\" placeholder=\"Quantity\" /></td>\n            <td><button onClick={() => this.sendOrder(food._id) }>Order</button></td>\n        </tr>\n        }); \n    }\n\n    render(){\n        return (\n            <Container>    \n                <h2 className=\"h2Class\">Order Menu</h2>\n               <Table striped>\n                   <thead>\n                       <tr>\n                    \n                           <th>Product</th>\n                           <th>Quantity</th>\n                           <th>Order</th>\n                       </tr>\n                   </thead>\n                   <tbody>\n                       \n                       {this.getFoodData()}\n                   </tbody>\n               </Table>\n         </Container>\n           \n        );\n    }\n}\n\n\n\n\nexport default PlaceOrder;","import React,{Component} from 'react';\nimport { Button,Table,Container } from 'reactstrap';\nimport {socket} from '../global/header';\nclass UpdatePredicted extends Component{\n    \n    constructor(){\n        super();\n        this.state = {\n            color:'white',\n            food_data:[]\n            // this is where we are connecting to with sockets,\n          };\n    }\n\n\n    getData = (foodItems)=>{\n       \n        this.setState({food_data:foodItems});\n    }\n\n    componentDidMount(){\n        var state_current = this;\n        socket.emit(\"initial_data\");\n        socket.on(\"get_data\",this.getData);\n    }\n\n    sendPredQty = (id) =>{\n        var predicted_details;\n         this.state.food_data.map((food)=>{\n            if(food._id == id){\n                predicted_details = food;\n            }\n            return food;\n        });\n        console.log(predicted_details);\n        socket.emit('ChangePred', predicted_details); \n\n    }\n\n    changePredQuantity = (event,foodid) => {\n        if( parseInt(event.target.value) < 0 ){\n            event.target.value = 0;\n        }\n        var new_array = this.state.food_data.map((food)=>{\n            if(food._id == foodid){\n                food.predQty = parseInt(event.target.value);   \n            }\n            return food;\n        });\n        this.setState({food_data:new_array});\n     \n    }\n\n    componentWillUnmount(){\n        socket.off(\"get_data\",this.getData);   \n    }\n\n\n   \n\n    getFoodData(){\n\n        return this.state.food_data.map((food)=>{\n            return <tr key={food._id}>\n            <td> {food.name} </td>\n            <td><input onChange={(e) => this.changePredQuantity(e,food._id)} value={food.predQty}   type=\"number\" placeholder=\"Quantity\" min=\"0\"/></td>\n            <td><button onClick={() => this.sendPredQty(food._id) }>Update Qty</button></td>\n        </tr>\n        }); \n    }\n\n    render(){\n        return (\n            <Container>   \n                <h2 className=\"h2Class\">Update Predicted</h2> \n               <Table striped>\n                   <thead>\n                       <tr>\n                    \n                           <th>Product</th>\n                           <th>Predicted Qty</th>\n                           <th>Update</th>\n                       </tr>\n                   </thead>\n                   <tbody>\n                       \n                       {this.getFoodData()}\n                   </tbody>\n               </Table>\n         </Container>\n           \n        );\n    }\n}\n\n\n\n\nexport default UpdatePredicted;","import React,{Component} from 'react';\nimport { Button,Table,Container } from 'reactstrap';\nimport {socket} from '../global/header';\nimport ReactHTMLTableToExcel from 'react-html-table-to-excel';\nclass Kitchen extends Component{\n    \n    constructor(){\n        super();\n        this.state = {\n            color:'white',\n            food_data:[]\n            // this is where we are connecting to with sockets,\n          };\n    }\n\n\n    getData = (foodItems)=>{\n        console.log(foodItems);\n        this.setState({food_data:foodItems});\n    }\n\n    changeData = () => socket.emit(\"initial_data\");\n\n    componentDidMount(){\n        var state_current = this;\n        socket.emit(\"initial_data\");\n        socket.on(\"get_data\",this.getData);\n        socket.on(\"change_data\",this.changeData);\n    }\n\n    componentWillUnmount(){\n        socket.off(\"get_data\");\n        socket.off(\"change_data\");\n    }\n\n    markDone = (id) =>{\n        \n       // console.log(predicted_details);\n        socket.emit('mark_done', id); \n\n    }\n\n    changePredQuantity = (event,foodid) => {\n        if( parseInt(event.target.value) < 0 ){\n            event.target.value = 0;\n        }\n        var new_array = this.state.food_data.map((food)=>{\n            if(food._id == foodid){\n                food.predQty = parseInt(event.target.value);   \n            }\n            return food;\n        });\n        this.setState({food_data:new_array});\n     \n    }\n\n\n   \n\n    getFoodData(){\n\n        return this.state.food_data.map((food)=>{\n            return <tr key={food._id}>\n            <td> {food.name} </td>\n            <td> {food.ordQty} </td>\n            <td> {food.prodQty} </td>\n            <td> {food.predQty} </td>\n            <td><button onClick={() => this.markDone(food._id) }>Done</button></td>\n        </tr>\n        }); \n    }\n\n    render(){\n        return (\n            <Container>    \n                <h2 className=\"h2Class\">Kitchen Area</h2>\n                 <ReactHTMLTableToExcel\n                    id=\"test-table-xls-button\"\n                    className=\"download-table-xls-button\"\n                    table=\"table-to-xls\"\n                    filename=\"tablexls\"\n                    sheet=\"tablexls\"\n                    buttonText=\"Download as XLS\"/>\n\n               <Table striped id=\"table-to-xls\">\n                   <thead>\n                       <tr>\n                          <th>Name</th>\n                           <th>Quantity</th>\n                           <th>Created Till Now</th>\n                           <th>Predicted</th>\n                           <th>Status</th>\n                       </tr>\n                   </thead>\n                   <tbody>\n                       \n                       {this.getFoodData()}\n                   </tbody>\n               </Table>\n         </Container>\n           \n        );\n    }\n}\n\n\n\n\nexport default Kitchen;","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport {Header} from './global/header'\nimport { Switch, Route } from 'react-router-dom';\n\n\nimport PlaceOrder from './main/PlaceOrder';\nimport UpdatePredicted from './main/UpdatePredicted';\nimport Kitchen from './main/Kitchen';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Header/>\n        <Switch>\n          <Route exact path='/'  component={PlaceOrder}/>\n          <Route path='/updatepredicted' component={UpdatePredicted}/>\n          <Route path='/kitchen' component={Kitchen}/>\n        </Switch>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter } from 'react-router-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n<BrowserRouter >\n<App />\n</BrowserRouter>\n, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}